name: Export and Prepare Game Artifacts

description: Export the game using Godot and prepare artifacts for deployment.

inputs:
  deploy-platform:
    description: The platform to deploy to.
    default: ""
  export-platform:
    description: The platform to export.
    default: ""
  bin:
    description: The bin to deploy with.
    default: ""
  deploy-bin:
    description: The binary file for deployment.
    default: ""
  game-name:
    description: The name of the game.
    default: ""
  game-repository:
    description: The location of the game repository.
    default: ""
  game-repository-ref:
    description: The ref of the game repository.
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.game-repository }}
        ref: ${{ inputs.game-repository-ref }}
        path: game

    - name: Generate build constants
      shell: bash
      run: |
        export BUILD_LABEL="${{ github.repository }}/${{ github.sha }}"
        export BUILD_GAME_LABEL="${{ inputs.game-repository }}/${{ inputs.game-repository-ref }}"
        export BUILD_DATE_STR="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        export BUILD_UNIX_TIME="$(date +%s)"
        export BUILD_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
        mkdir -p game/addons/vsk_version/
        cat << EOF > game/addons/vsk_version/build_constants.gd
        ## AUTOGENERATED BY BUILD
        const BUILD_LABEL = "$BUILD_LABEL"
        const BUILD_GAME_LABEL = "$BUILD_GAME_LABEL"
        const BUILD_DATE_STR = "$BUILD_DATE_STR"
        const BUILD_UNIX_TIME = "$BUILD_UNIX_TIME"
        const BUILD_URL = "$BUILD_URL"
        EOF
        cat game/addons/vsk_version/build_constants.gd

    - name: Export Game
      if: ${{ inputs.deploy-platform }}
      run: |
        mkdir -p .godot/editor .godot/imported export
        chmod +x ${{ inputs.bin }}
        ${{ inputs.bin }} --headless --xr-mode off --export-pack ${{ inputs.export-platform }} `pwd`/${{ inputs.game-name }}.pck --path game || true
      shell: bash

    - name: Prepare artifacts
      if: ${{ inputs.deploy-platform }}
      run: |
        ls
        # Check if the .pck file exists
        if [ ! -f ./${{ inputs.game-name }}.pck ]; then
            echo "Error: ${{ inputs.game-name }}.pck does not exist."
            exit 1
        fi

        # Check if the path to the .pck file is correct
        if [ ! -f `pwd`/${{ inputs.game-name }}.pck ]; then
            echo "Error: The path to ${{ inputs.game-name }}.pck is incorrect."
            exit 1
        fi

        rm -rf ${{ inputs.game-name }}
        mkdir -p ${{ inputs.game-name }}

        if [ "${{ inputs.deploy-platform }}" == "windows" ]; then
            cp -rf ${{ inputs.deploy-bin }} ${{ inputs.game-name }}/${{ inputs.game-name }}.exe
        else
            cp -rf ${{ inputs.deploy-bin }} ${{ inputs.game-name }}/${{ inputs.game-name }}
        fi

        cp -rf `pwd`/${{ inputs.game-name }}.pck ${{ inputs.game-name }}/${{ inputs.game-name }}.pck
        7z a -r ${{ inputs.game-name }}.zip $TARGET
      shell: bash

    - name: Upload Godot Artifact Export
      if: ${{ inputs.deploy-platform }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.game-name }}
        path: |
          ${{ inputs.game-name }}.zip
